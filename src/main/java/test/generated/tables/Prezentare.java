/**
 * This class is generated by jOOQ
 */
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import test.generated.ItdaysDb;
import test.generated.Keys;
import test.generated.tables.records.PrezentareRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Prezentare extends TableImpl<PrezentareRecord> {

	private static final long serialVersionUID = -2031030523;

	/**
	 * The reference instance of <code>itdays_db.prezentare</code>
	 */
	public static final Prezentare PREZENTARE = new Prezentare();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<PrezentareRecord> getRecordType() {
		return PrezentareRecord.class;
	}

	/**
	 * The column <code>itdays_db.prezentare.id</code>.
	 */
	public final TableField<PrezentareRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>itdays_db.prezentare.titlu</code>.
	 */
	public final TableField<PrezentareRecord, String> TITLU = createField("titlu", org.jooq.impl.SQLDataType.VARCHAR.length(45), this, "");

	/**
	 * The column <code>itdays_db.prezentare.data</code>.
	 */
	public final TableField<PrezentareRecord, Timestamp> DATA = createField("data", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>itdays_db.prezentare.id_topic</code>.
	 */
	public final TableField<PrezentareRecord, Integer> ID_TOPIC = createField("id_topic", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>itdays_db.prezentare</code> table reference
	 */
	public Prezentare() {
		this("prezentare", null);
	}

	/**
	 * Create an aliased <code>itdays_db.prezentare</code> table reference
	 */
	public Prezentare(String alias) {
		this(alias, PREZENTARE);
	}

	private Prezentare(String alias, Table<PrezentareRecord> aliased) {
		this(alias, aliased, null);
	}

	private Prezentare(String alias, Table<PrezentareRecord> aliased, Field<?>[] parameters) {
		super(alias, ItdaysDb.ITDAYS_DB, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<PrezentareRecord, Integer> getIdentity() {
		return Keys.IDENTITY_PREZENTARE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<PrezentareRecord> getPrimaryKey() {
		return Keys.KEY_PREZENTARE_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<PrezentareRecord>> getKeys() {
		return Arrays.<UniqueKey<PrezentareRecord>>asList(Keys.KEY_PREZENTARE_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<PrezentareRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<PrezentareRecord, ?>>asList(Keys.FK_TOPIC);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Prezentare as(String alias) {
		return new Prezentare(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Prezentare rename(String name) {
		return new Prezentare(name, null);
	}
}
